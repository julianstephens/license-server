basePath: /api/v1
definitions:
  controller.AuthRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    type: object
  controller.ScopeRequest:
    properties:
      add:
        items:
          type: string
        type: array
      remove:
        items:
          type: string
        type: array
    type: object
  httputil.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  httputil.HTTPResponse-array_model_Product:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      message:
        type: string
    type: object
  httputil.HTTPResponse-array_model_User:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
      message:
        type: string
    type: object
  httputil.HTTPResponse-model_DisplayAPIKey:
    properties:
      data:
        $ref: '#/definitions/model.DisplayAPIKey'
      message:
        type: string
    type: object
  httputil.HTTPResponse-model_Product:
    properties:
      data:
        $ref: '#/definitions/model.Product'
      message:
        type: string
    type: object
  httputil.HTTPResponse-model_User:
    properties:
      data:
        $ref: '#/definitions/model.User'
      message:
        type: string
    type: object
  httputil.HTTPResponse-model_UserWithScopes:
    properties:
      data:
        $ref: '#/definitions/model.UserWithScopes'
      message:
        type: string
    type: object
  model.DisplayAPIKey:
    properties:
      authentication_scopes:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      expires_at:
        type: string
      id:
        type: string
      key:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  model.License:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      product:
        $ref: '#/definitions/model.Product'
      product_id:
        type: string
      updated_at:
        type: integer
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
      value:
        type: string
    type: object
  model.Product:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      licenses:
        items:
          $ref: '#/definitions/model.License'
        type: array
      name:
        type: string
      rules:
        items:
          $ref: '#/definitions/model.Rule'
        type: array
      updated_at:
        type: integer
    type: object
  model.Rule:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      updated_at:
        type: integer
      user_groups:
        items:
          $ref: '#/definitions/model.UserGroup'
        type: array
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.User:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      email:
        type: string
      groups:
        items:
          $ref: '#/definitions/model.UserGroup'
        type: array
      id:
        type: string
      name:
        type: string
      updated_at:
        type: integer
    type: object
  model.UserGroup:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      name:
        type: string
      rules:
        items:
          $ref: '#/definitions/model.Rule'
        type: array
      updated_at:
        type: integer
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.UserWithScopes:
    properties:
      authentication_scopes:
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/model.User'
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST API for managing software licenses
  title: License Server API
  version: 0.1.0
paths:
  /admin/products:
    get:
      description: retrieves all products
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-array_model_Product'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Get all products
      tags:
      - products
    post:
      description: creates a new product
      parameters:
      - description: new product info
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Add a product
      tags:
      - products
  /admin/products/:id:
    delete:
      description: deletes a specific product
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Delete a product
      tags:
      - products
    get:
      description: retrieve a specific product
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Get a product
      tags:
      - products
    put:
      description: updates a specific product
      parameters:
      - description: updated product info
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Product'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Update a product
      tags:
      - products
  /admin/users:
    get:
      description: retrieves all users
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-array_model_User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Get all users
      tags:
      - users
    post:
      description: creates a new user
      parameters:
      - description: new user info
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Add a user
      tags:
      - users
  /admin/users/:id:
    delete:
      description: deletes a specific user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Delete a user
      tags:
      - users
    get:
      description: retrieve a specific user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-model_UserWithScopes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Get a user
      tags:
      - users
    put:
      description: updates a specific user
      parameters:
      - description: updated user info
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKey: []
      summary: Update a user
      tags:
      - users
  /admin/users/:id/scopes:
    put:
      description: update scopes for a specific user
      parameters:
      - description: scopes to modify
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controller.ScopeRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-model_UserWithScopes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Update a user's scope
      tags:
      - users
  /auth/register:
    post:
      description: registers new application user
      parameters:
      - description: new user info
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controller.AuthRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Register a user
      tags:
      - auth
  /auth/token:
    post:
      description: creates a new API key
      parameters:
      - description: returning user info
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controller.AuthRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.HTTPResponse-model_DisplayAPIKey'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Create a token
      tags:
      - auth
schemes:
- http
securityDefinitions:
  ApiKey:
    in: header
    name: X-API-KEY
    type: apiKey
swagger: "2.0"
